{"version":3,"sources":["components/AppHeader/index.js","components/AppHeader/AppHeader.js","components/TodoListItem/TodoListItem.js","components/TodoList/index.js","components/TodoList/TodoList.js","components/SearchPanel/index.js","components/SearchPanel/SearchPanel.js","components/ItemStatusFilter/index.js","components/ItemStatusFilter/ItemStatusFilter.js","components/ItemAddForm/index.js","components/ItemAddForm/ItemAddForm.js","components/App/App.js","index.js"],"names":["AppHeader","toDo","done","className","TodoListItem","this","props","label","onDeleted","onToggleDone","onToggleImportant","classNames","important","onClick","type","Component","TodoList","todos","elements","map","item","id","itemProps","key","SearchPanel","state","term","onSearchChange","evt","target","value","setState","placeholder","onChange","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","addItem","text","newItem","deleteItem","idx","findIndex","el","before","slice","after","oldItem","items","length","toLowerCase","indexOf","visibleItems","search","doneCount","todoCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c0897ad.chunk.js","sourcesContent":["import AppHeader from './AppHeader';\nexport default AppHeader;","import React from 'react';\nimport './AppHeader.css';\n\nconst AppHeader = ({ toDo, done }) => {\n    return (\n\n        <div className=\"app-header d-flex\">\n            <h1>Todo List</h1>\n            <h2>{toDo} more to do, {done} done</h2>\n        </div>\n    );\n};\n\nexport default AppHeader;\n","import React, { Component } from 'react';\nimport './TodoListItem.css';\n\n\nclass TodoListItem extends Component {\n    render() {\n        const { label, onDeleted, onToggleDone, onToggleImportant, done, important } = this.props;\n\n        let classNames = 'todo-list-item';\n        if (done) {\n            classNames += ' done';\n        }\n\n        if (important) {\n            classNames += ' important';\n        }\n\n        return (\n            <span className={classNames}>\n                <span\n                    className='todo-list-item-label'\n                    onClick={onToggleDone}>\n                    {label}\n                </span>\n\n                <button\n                    type='button'\n                    className='btn btn-outline-success btn-sm float-right'\n                    onClick={onToggleImportant}>\n                    <i className='fa fa-exclamation' />\n                </button>\n                <button\n                    type='button'\n                    className='btn btn-outline-danger btn-sm float-right'\n                    onClick={onDeleted}>\n                    <i className='fa fa-trash-o' />\n                </button>\n\n            </span >\n        );\n    }\n}\n\nexport default TodoListItem;\n","import TodoList from './TodoList';\nexport default TodoList;","import React from 'react';\nimport TodoListItem from '../TodoListItem/TodoListItem';\nimport './TodoList.css';\n\nconst TodoList = ({ todos, onDeleted, onToggleDone, onToggleImportant }) => {\n\n    const elements = todos.map((item) => {\n\n        const { id, ...itemProps } = item;\n\n        return (\n            <li key={id} className='list-group-item'>\n                <TodoListItem\n                    {...itemProps}\n                    onDeleted={() => onDeleted(id)}\n                    onToggleDone={() => onToggleDone(id)}\n                    onToggleImportant={() => onToggleImportant(id)}\n                />\n            </li>\n        );\n    });\n\n    return (\n        <ul className='list-group todo-list'>\n            {elements}\n        </ul>\n    );\n};\n\nexport default TodoList;\n\n","import SearchPanel from './SearchPanel';\nexport default SearchPanel;","import React, { Component } from 'react';\nimport './SearchPanel.css';\n\nclass SearchPanel extends Component {\n    state = {\n        term: ''\n    };\n    onSearchChange = (evt) => {\n        const term = evt.target.value;\n        this.setState({ term });\n        this.props.onSearchChange(term);\n    };\n    render() {\n        return (\n            <input\n                type='text'\n                placeholder='type to search'\n                className='form-control search-input'\n                value={this.state.term}\n                onChange={this.onSearchChange} />\n        );\n    }\n};\n\nexport default SearchPanel;\n","import ItemStatusFilter from './ItemStatusFilter';\nexport default ItemStatusFilter;","import React, { Component } from 'react';\nimport './ItemStatusFilter.css';\n\n\nclass ItemStatusFilter extends Component {\n    buttons = [\n        { name: 'all', label: 'All' },\n        { name: 'active', label: 'Active' },\n        { name: 'done', label: 'Done' }\n    ];\n    render() {\n        const { filter, onFilterChange } = this.props;\n        const buttons = this.buttons.map(({ name, label }) => {\n            const isActive = filter === name;\n            const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\n            return (\n                <button\n                    type='button'\n                    className={`btn ${clazz}`}\n                    key={name}\n                    onClick={() => onFilterChange(name)}\n                >{label}\n                </button >\n            );\n        });\n        return (\n            <div className='btn-group'>\n                {buttons}\n            </div>\n        );\n    }\n}\n\nexport default ItemStatusFilter;\n","import ItemAddForm from './ItemAddForm';\nexport default ItemAddForm;","import React, { Component } from 'react';\nimport './ItemAddForm.css';\n\nclass ItemAddForm extends Component {\n\n    state = {\n        label: ''\n    };\n\n    onLabelChange = (evt) => {\n        this.setState({\n            label: evt.target.value\n        });\n    };\n\n    onSubmit = (evt) => {\n        evt.preventDefault();\n        this.props.onItemAdded(this.state.label);\n        this.setState({\n            label: ''\n        });\n    };\n    render() {\n        const { onItemAdded } = this.props;\n        return (\n            <form\n                className='item-add-form d-flex'\n                onSubmit={this.onSubmit}>\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    onChange={this.onLabelChange}\n                    placeholder='What needs to be done?'\n                    value={this.state.label} />\n                <button\n                    className=\"btn btn-outline-secondary w-50\"\n                    onClick={() => this.onItemAdded}>\n                    Add Item\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default ItemAddForm;","import React, { Component } from 'react';\n\nimport AppHeader from '../AppHeader';\nimport TodoList from '../TodoList';\nimport SearchPanel from '../SearchPanel';\nimport ItemStatusFilter from '../ItemStatusFilter';\nimport ItemAddForm from '../ItemAddForm';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n    maxId = 100;\n    state = {\n        todoData: [\n            {\n                label: 'Drink Coffee',\n                important: false,\n                id: 1\n            },\n            {\n                label: 'Make Awesome App',\n                important: false,\n                id: 2\n            },\n            {\n                label: 'Have a lunch',\n                important: false,\n                id: 3\n            }\n        ],\n        term: '',\n        filter: 'all'\n    };\n\n    // createTodoItem(label) {\n    //     const newItem = {\n    //         label,\n    //         important: false,\n    //         done: false,\n    //         id: this.maxId++\n    //     };\n    // }\n\n    addItem = (text) => {\n        //generate id \n        const newItem = {\n            label: text,\n            important: false,\n            id: this.maxId++\n        };\n\n        //add element to array\n        this.setState(({ todoData }) => {\n            const newArr = [...todoData, newItem];\n            return {\n                todoData: newArr\n            };\n        });\n\n    };\n\n    deleteItem = (id) => {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el) => el.id === id);\n\n            const before = todoData.slice(0, idx);\n            const after = todoData.slice(idx + 1);\n            const newArr = [...before, ...after];\n\n            return {\n                todoData: newArr\n            };\n        });\n    };\n\n    // toggleProperty(arr, id, propName) {\n    //     const idx = arr.findIndex((el) => el.id === id);\n    //     const oldItem = arr[idx];\n    //     const newItem = {\n    //         ...oldItem,\n    //         [propName]: !oldItem[propName]\n    //     };\n    //     const before = arr.slice(0, idx);\n    //     const after = todoData.slice(idx + 1);\n\n    //     const newArr = [\n    //         ...before,\n    //         newItem,\n    //         ...after\n    //     ];\n\n    //     return {\n    //         todoData: newArr\n    //     };\n    // }\n\n    onToggleImportant = (id) => {\n\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el) => el.id === id);\n            const oldItem = todoData[idx];\n            const newItem = {\n                ...oldItem,\n                important: !oldItem.important\n            };\n            const before = todoData.slice(0, idx);\n            const after = todoData.slice(idx + 1);\n\n            const newArr = [\n                ...before,\n                newItem,\n                ...after\n            ];\n\n            return {\n                todoData: newArr\n            };\n        });\n\n    };\n    onToggleDone = (id) => {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el) => el.id === id);\n            const oldItem = todoData[idx];\n            const newItem = {\n                ...oldItem,\n                done: !oldItem.done\n            };\n            const before = todoData.slice(0, idx);\n            const after = todoData.slice(idx + 1);\n\n            const newArr = [\n                ...before,\n                newItem,\n                ...after\n            ];\n\n            return {\n                todoData: newArr\n            };\n        });\n    };\n\n\n\n    search(items, term) {\n        if (term.length === 0) {\n            return items;\n        }\n        return items.filter((item) => {\n            return item.label\n                .toLowerCase()\n                .indexOf(term) > -1;\n        });\n    }\n\n    onSearchChange = (term) => {\n        this.setState({ term });\n    };\n    onFilterChange = (filter) => {\n        this.setState({ filter });\n    };\n\n    filter(items, filter) {\n        switch (filter) {\n            case 'all':\n                return items;\n            case 'active':\n                return items.filter((item) => !item.done);\n            case 'done':\n                return items.filter((item) => item.done);\n            default:\n                return items;\n        }\n    }\n\n\n    render() {\n\n        const { todoData, term, filter } = this.state;\n        const visibleItems = this.filter(\n            this.search(todoData, term), filter);\n\n        const doneCount = todoData.filter((el) => el.done).length;\n        const todoCount = todoData.length - doneCount;\n\n        return (\n            <div className='todo-app' >\n                <AppHeader\n                    toDo={todoCount}\n                    done={doneCount} />\n                <div className=\"top-panel d-flex\">\n                    <SearchPanel onSearchChange={this.onSearchChange} />\n                    <ItemStatusFilter\n                        filter={filter}\n                        onFilterChange={this.onFilterChange}\n                    />\n                </div>\n                <TodoList\n                    todos={visibleItems}\n                    onDeleted={this.deleteItem}\n                    onToggleImportant={this.onToggleImportant}\n                    onToggleDone={this.onToggleDone}\n                />\n                <ItemAddForm onItemAdded={this.addItem} />\n            </div>\n        );\n    }\n};\n\n\n\nexport default App;\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(<App />,\n  document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}